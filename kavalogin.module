<?php
/** kavalogin.module - KAVA Login: adds CiviCRM <-> CAS login integration **/

/**
 * Implements hook_menu. Adds admin page to set API key and url.
 * @return array Pages
 */
function kavalogin_menu() {
  return [
    'account/registreren'            => [
      'title'           => 'Registreren',
      'description'     => 'Nieuw account aanmaken',
      'type'            => MENU_NORMAL_ITEM,
      'page callback'   => 'drupal_get_form',
      'page arguments'  => ['kavalogin_register_form'],
      'access callback' => 'user_is_anonymous',
    ],
    'account/changepass'             => [
      'title'           => 'Wachtwoord wijzigen',
      'description'     => 'Wijzig uw wachtwoord',
      'type'            => MENU_NORMAL_ITEM,
      'page callback'   => 'drupal_get_form',
      'page arguments'  => ['kavalogin_changepass_form'],
      'access callback' => 'user_is_logged_in',
    ],
    'admin/config/civicrm/kavalogin' => [
      'title'            => 'Instellingen KAVA-login',
      'description'      => 'Integratie met de KAVA account API en CAS-server',
      'type'             => MENU_NORMAL_ITEM,
      'page callback'    => 'drupal_get_form',
      'page arguments'   => ['kavalogin_admin_form'],
      'access callback'  => 'user_access',
      'access arguments' => ['access administration pages'],
      'weight'           => 21,
    ],
  ];
}

/**
 * User insert hook. Runs after CAS, but before CiviCRM.
 * If an existing user just logged on via CAS, we'll try to match the account to a contact record.
 * @param array $edit User attributes
 * @param object $account Drupal user object
 * @param string $category Category
 * @return bool Success
 */
function kavalogin_user_insert(&$edit, $account, $category) {

  $kcivicrm = KAVALogin_CiviCRM::getInstance();
  return $kcivicrm->match($account);
}

/**
 * User login hook. Runs after CAS, but before CiviCRM.
 * If an existing user just logged on via CAS, we'll try to match the account to a contact record.
 * @param array $edit User attributes
 * @param object $account Drupal user object
 * @return bool Success
 */
function kavalogin_user_login(&$edit, $account) {

  $kcivicrm = KAVALogin_CiviCRM::getInstance();
  return $kcivicrm->match($account);
}

/**
 * Disallow access to the default password reset page, so the link is not shown.
 * @param array $items Existing menu items
 */
function kavalogin_menu_alter(&$items) {
  $items['user/password']['access callback'] = FALSE;
}

/**
 * User registration form.
 * @param array $form Form array
 * @param array $form_state Form state array
 * @return array Form
 */
function kavalogin_register_form($form, &$form_state) {

  $form['info'] = [
    '#markup' => '<p>Als u nog geen logingegevens hebt voor KAVA.be, kunt u hier een account aanmaken.<br>Hebt u al wel een account, <a href="/user/login">klik dan hier om in te loggen</a>.</p>',
  ];

  $form['first_name'] = [
    '#type'          => 'textfield',
    '#title'         => t('Voornaam'),
    '#default_value' => (!empty($form_state['values']['first_name']) ? $form_state['values']['first_name'] : NULL),
    '#required'      => TRUE,
  ];

  $form['last_name'] = [
    '#type'          => 'textfield',
    '#title'         => t('Achternaam'),
    '#default_value' => (!empty($form_state['values']['last_name']) ? $form_state['values']['last_name'] : NULL),
    '#required'      => TRUE,
  ];

  $form['street_address'] = [
    '#type'          => 'textfield',
    '#title'         => t('Straat en huisnummer'),
    '#default_value' => (!empty($form_state['values']['street_address']) ? $form_state['values']['street_address'] : NULL),
    '#required'      => TRUE,
  ];

  $form['postal_code'] = [
    '#type'          => 'textfield',
    '#title'         => t('Postcode'),
    '#default_value' => (!empty($form_state['values']['postal_code']) ? $form_state['values']['postal_code'] : NULL),
    '#required'      => TRUE,
  ];

  $form['city'] = [
    '#type'          => 'textfield',
    '#title'         => t('Plaats'),
    '#default_value' => (!empty($form_state['values']['city']) ? $form_state['values']['city'] : NULL),
    '#required'      => TRUE,
  ];

  $form['phone'] = [
    '#type'          => 'textfield',
    '#title'         => t('Telefoon'),
    '#default_value' => (!empty($form_state['values']['phone']) ? $form_state['values']['phone'] : NULL),
    '#required'      => TRUE,
  ];

  $form['email'] = [
    '#type'          => 'textfield',
    '#title'         => t('E-mailadres'),
    '#default_value' => (!empty($form_state['values']['email']) ? $form_state['values']['email'] : NULL),
    '#required'      => TRUE,
  ];

  $form['contacttype'] = [
    '#type'          => 'radios',
    '#title'         => t('Ik ben een'),
    '#default_value' => (!empty($form_state['values']['contacttype']) ? $form_state['values']['contacttype'] : NULL),
    '#options'       => [
      'apotheekassistent' => 'Assistent',
      'apotheker'         => 'Apotheker',
      'none'              => 'Anders',
    ],
    '#required'      => TRUE,
  ];

  $form['submit'] = [
    '#type'  => 'submit',
    '#value' => t('Registreren'),
  ];

  $form['#validate'][] = 'kavalogin_register_form_validate';
  $form['#submit'][] = 'kavalogin_register_form_submit';

  return $form;
}

/**
 * Validate user register form. Checks if a user already exists for this email address.
 * (Update: does not check for a CiviCRM contact anymore at this point.)
 * @param array $form Form array
 * @param array $form_state Form state array
 */
function kavalogin_register_form_validate(&$form, &$form_state) {

  $email = $form_state['values']['email'];

  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    form_set_error('email', 'U hebt geen geldig e-mailadres ingevoerd.');
  }
  else {
    $account = user_load_by_mail($email);
    if ($account) {
      form_set_error('email', 'Er bestaat al een account voor deze website met dit emailadres. <a href="/user/login">U kunt hier inloggen</a>.');
    }
  }
}

/**
 * Submit user registration form. Based on the result the KAVA Account API provides,
 * we'll create a Drupal account and link it to a (new or existing) CiviCRM contact.
 * @param array $form Form array
 * @param array $form_state Form state array
 * @return bool Success
 */
function kavalogin_register_form_submit(&$form, &$form_state) {

  $kaccapi = KAVALogin_AccountAPI::getInstance();
  $kcivicrm = KAVALogin_CiviCRM::getInstance();

  $params = $form_state['values'];
  $drupalUser = NULL;

  // Call API
  $result = $kaccapi->callAccountAPI($params['email'], $params['first_name'], $params['last_name']);
  if (!$result || !isset($result->user) || !isset($result->user->login)) {
    drupal_set_message('Er is een fout opgetreden bij het aanmaken van een gebruikersaccount. Probeer het later opnieuw of neem contact op met KAVA voor ondersteuning.', 'error');
    return FALSE;
  }

  // Try to CiviCRM user by barcode or email
  $contact = NULL;
  if (!empty($result->user->barcode)) {
    $contact = $kcivicrm->getCiviContactByBarcode($result->user->barcode);
  }
  if (!$contact) {
    $contact = $kcivicrm->getCiviContactByEmail($params['email']);
  }

  if ($contact && $kcivicrm->checkUFMatch($contact['contact_id'])) {
    drupal_set_message('Account kan niet worden aangemaakt: er is al een account gekoppeld aan dit emailadres of deze barcode. Neem contact op met KAVA voor ondersteuning.', 'error');
    kavalogin_log('Could not create account: contact ' . $contact['contact_id'] . ' is already linked to a Drupal account.');
    return FALSE;
  }

  // Update existing contact if it exists, or add a new contact
  if ($contact) {

    $contact_id = $contact['contact_id'];
    $kcivicrm->addUpdateContact([
      'contact_id' => $contact_id,
      'barcode'    => isset($result->user->barcode) ? $result->user->barcode : NULL,
      'username'   => isset($result->user->login->login) ? $result->user->login->login : NULL,
    ]);
    kavalogin_log('Updated existing contact: ' . $contact_id . '. API reports method ' . $result->method . '.', FALSE, WATCHDOG_INFO);
  }
  // Add new contact
  else {

    $contact_id = $kcivicrm->addUpdateContact(array_merge($params, [
      'barcode'  => isset($result->user->barcode) ? $result->user->barcode : NULL,
      'username' => isset($result->user->login->login) ? $result->user->login->login : NULL,
    ]));
    kavalogin_log('Created new contact: ' . $contact_id . '. API reports method ' . $result->method . '.', FALSE, WATCHDOG_INFO);
  }

  // Create Drupal user
  $drupalUser = $kcivicrm->addDrupalUser([
    'username' => $result->user->login->login,
    'email'    => $params['email'],
  ]);
  if (!$drupalUser) {
    drupal_set_message('Er is een fout opgetreden bij het aanmaken van een gebruikersaccount. Probeer het later opnieuw of neem contact op met KAVA voor ondersteuning.', 'error');
    return FALSE;
  }

  // Add UFMatch
  $kcivicrm->addUFMatch($drupalUser->uid, $contact_id, $result->user->login->login);

  // Log in and redirect
  global $user;
  $user = $drupalUser;
  user_login_finalize();

  drupal_set_message('Uw gebruikersaccount is aangemaakt. Uw gebruikersnaam is: <strong>' . $result->user->login->login . '</strong>.<br>U bent nu ingelogd op KAVA.be en ontvangt een e-mail met uw logingegevens.', 'status');
  return drupal_goto('/');
}

/**
 * Password change form. Submits to https://login.kava.be/karapi/change
 * @param array $form Form array
 * @param array $form_state Form state array
 * @return array Form
 */
function kavalogin_changepass_form($form, &$form_state) {

  $form['#action'] = variable_get('kavalogin_apiurl') . 'change';

  $form['info'] = [
    '#markup' => '<p>U kunt hier uw wachtwoord voor KAVA.be wijzigen.</p>',
  ];

  global $user;
  $kcivicrm = KAVALogin_CiviCRM::getInstance();
  $form['barcode'] = [
    '#type'          => 'hidden',
    '#default_value' => $kcivicrm->getFieldForDrupalUser($user->uid, 'barcode'),
    '#required'      => TRUE,
  ];

  $form['oldPassword'] = [
    '#type'     => 'password',
    '#title'    => t('Huidig wachtwoord'),
    '#required' => TRUE,
  ];

  $form['newPassword'] = [
    '#type'     => 'password',
    '#title'    => t('Nieuw wachtwoord'),
    '#required' => TRUE,
  ];

  $form['confirmNewPassword'] = [
    '#type'     => 'password',
    '#title'    => t('Nieuw wachtwoord bevestigen'),
    '#required' => TRUE,
  ];

  $form['submit'] = [
    '#type'  => 'submit',
    '#value' => t('Verzenden'),
  ];

  return $form;
}

/**
 * Admin settings form for login module
 * @return mixed Form
 */
function kavalogin_admin_form() {

  $form = [];

  $form['kavalogin_info'] = [
    '#markup' => '<p>Stel hier de URL en key in voor de API die wordt gebruikt om nieuwe gebruikersaccounts aan te maken.</p>',
  ];

  $form['kavalogin_apiurl'] = [
    '#type'          => 'textfield',
    '#title'         => 'API-url',
    '#default_value' => variable_get('kavalogin_apiurl', 'https://login.kava.be/karapi/'),
    '#required'      => TRUE,
  ];

  $form['kavalogin_apikey'] = [
    '#type'          => 'textfield',
    '#title'         => 'API-key',
    '#default_value' => variable_get('kavalogin_apikey'),
    '#required'      => TRUE,
  ];

  return system_settings_form($form);
}

/**
 * Log helper function (shortcut for watchdog / drupal_set_message)
 * @param string $message Message
 * @param bool|FALSE $display Display message
 * @param int $severity Severity (WATCHDOG_*)
 */
function kavalogin_log($message, $display = FALSE, $severity = WATCHDOG_WARNING) {
  if ($display) {
    drupal_set_message('KAVALogin: ' . $message, 'warning');
  }
  watchdog('kavalogin', $message, [], $severity);
}